#!/usr/bin/env python
"""
Stimulus Generator.  This tool generates stimuli templates and converts prerecorded wav files of different shapes
                     to use as inputs to auditory models.

Usage:
    stimulus_generator -h | --help
    stimulus_generator --version
    stimulus_generator --make-template <templatepath> [-v | --verbose]
    stimulus_generator  [-v | --verbose] [--out <outpath>] (--from-wav <wavfile> --level <soundlevel>)

Options:
    -h --help               Show this screen and exit.
    --version               Display the version and exit.
    --out=<outpath>         Specify the output location for saved data. [default: ~/stimulus-output]
    -v --verbose            Display detailed debug log output to STDOUT.
    --level=<soundlevel>    Peak stimulus intensity, in dB SPL
    --from-wav=<wavfile>    Load a custom stimulus from the supplied path.
    --make-template=<templatepath>     Generate a copy of the YAML template at the specified location.
"""

import sys
from datetime import datetime
from logging import basicConfig, info, error, INFO, ERROR, getLogger

import numpy as np
import os
import shutil
from docopt import docopt
from os import path

from core._version import __version__
from core.base import stimulusTemplatePath, stim_consts as sc
from core.stimulus import Stimulus

# By default, log INFO and up.
basicConfig(format='%(levelname)s %(asctime)s- %(message)s', datefmt='%d %b %H:%M:%S', level=INFO)


def main():
    # get the command line args
    args = docopt(__doc__, version=__version__)

    # configure the log level appropriately
    if not args["--verbose"]:
        getLogger().setLevel(ERROR)

    # if copying the config file, do nothing else.
    if args["--make-template"]:
        make_template(args["--make-template"])
        exit(0)

    # barf if the level isn't a float
    level = _sanitize_level(args["--level"])

    s = Stimulus()
    stimulus = s.load_stimulus(args["--from-wav"], level)

    out = args["--out"]
    if out:
        _save_stimulus(stimulus, level, _set_output_dir(out))
    else:
        _return_stimulus(stimulus, level)
    return 0


def _sanitize_level(levels: str):
    """ Takes a string list of level parameters and converts them to a list of floats.
    """
    return [float(f) for f in levels.split(",") if f and levels]


def make_template(outpath):
    if not path.splitext(outpath)[1].lower() == ".yaml":
        error("didn't get a yaml file")
        raise NameError("The template path must specify a YAML file to be created.")
    retval = path.realpath(path.join(*path.split(path.expanduser(outpath))))
    info("output path set to " + retval)
    if not path.exists(path.dirname(retval)):
        info("path didn't exist, making it.")
        os.makedirs(path.dirname(retval))
    shutil.copy(stimulusTemplatePath, retval)
    info("copied tempate to target.")
    print("Created {0}".format(retval))


def _return_stimulus(stimulus: np.ndarray, level: [float]):
    """ Prints the generated stimulus and its sound level to STDOUT
    """
    np.savetxt(sys.stdout.buffer, {
        sc.Stimulus    : stimulus,
        sc.Levels      : level,
        sc.StimulusType: sc.Custom
    })


def _set_output_dir(temp: str) -> str:
    """ Returns a fully qualified path to output root directory.
    The directory is created if it does not exist.
    """
    # just in case we're on windows.
    temp.replace("\\", "\\\\")

    retval = path.realpath(path.join(*path.split(path.expanduser(temp))))
    if path.isfile(retval):
        retval = path.dirname(retval)
    # if the output path exists and is empty, make it the output root and return it.
    if path.exists(retval):
        return retval
    # if it doesn't exist, make it, make it the root, and return it.
    elif not path.exists(retval):
        os.makedirs(retval)
        return retval


def _save_stimulus(stimulus: np.ndarray, level: [float], outPath: str):
    outName = "wav_converted_{0}".format(datetime.now().strftime("%d%M%y_%H%M%S")) + str(level) + "dB"
    np.savez(path.join(_set_output_dir(outPath), outName), {
        sc.Stimulus    : stimulus,
        sc.Levels      : level,
        sc.StimulusType: sc.Custom
    })


if __name__ == "__main__":
    sys.exit(main())
