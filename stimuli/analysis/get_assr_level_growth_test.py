#Import modulesimport matplotlibimport numpy as npimport osmatplotlib.use('Agg')import matplotlib.pyplot as pltfrom matplotlib import cmimport matplotlib.gridspec as gridspecimport seaborn as snsfrom tkinter.filedialog import askopenfilenamefrom os import sepfrom mpl_toolkits.axes_grid1 import make_axes_locatablefrom math import ceilfrom scipy import signal#Set the current working directory to the 2_model-verhulst-abr folder in the external diskos.chdir('/Volumes/EXT_DISK/encina/2_data_for_scripts/1_modeling/2_model-verhulst-abr')# Get the file to load from model path directorypath_filename = askopenfilename(**{'initialdir': os.getcwd() }) #Load data from npz filesperiph = np.load(path_filename)periph_bm = periph['bm_velocity']periph_ihc = periph['ihc']periph_an_high_non_scaled = periph['an_high_spont']periph_an_med_non_scaled = periph['an_medium_spont']periph_an_low_non_scaled = periph['an_low_spont']periph_lvl = int(periph['stimulus_level'])#Distribution of different kind of SR fibers (Number of fibers per IHC)num_low_sr_x_ihc = 3num_med_sr_x_ihc = 3num_high_sr_x_ihc = 13num_total_sr_x_ihc = 19#Weighting factor to produce a W-I amplitude of 0.15 muVM1_weight_fact = 0.15e-6 / 2.7676e+07#Scale each SR fiber type by its proportionperiph_an_high = periph_an_high_non_scaled * (num_high_sr_x_ihc / num_total_sr_x_ihc)periph_an_med = periph_an_med_non_scaled * (num_med_sr_x_ihc / num_total_sr_x_ihc)periph_an_low = periph_an_low_non_scaled * (num_low_sr_x_ihc / num_total_sr_x_ihc)periph_an_sum = periph_an_high + periph_an_med + periph_an_lowfs = 100000freq_ax = periph['cf']time_ax = np.arange(0, .3, 1/fs)low_smpl_lim = 5150upper_smpl_lim = 9450freq_sampl_total = len(freq_ax)time_sampl_total = len(time_ax)idx_freq_off = [(index, item) for index, item in enumerate(freq_ax) if item > 5990 and	item < 6010]idx_freq_off = idx_freq_off[0][0]idx_freq_on = [(index, item) for index, item in enumerate(freq_ax) if item > 1995 and	item < 2005]idx_freq_on = idx_freq_on[0][0]##Plot the overview plots###freq_points = np.arange(periph_bm.shape[1])#time_points = np.arange(periph_bm.shape[0])##time_ax_r = np.arange(0, .3, 1/fs)#freq_pt_r = np.flipud(freq_points)#freq_ax_r = np.flipud(freq_ax)##fig = plt.figure()#ax = fig.add_subplot(111)#ax.pcolormesh(freq_points, time_ax_r, periph_ihc, cmap=cm.coolwarm)#ax.set_xscale('log')##fig_periph, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharey=True, figsize=(8,10))#fig_periph.suptitle('Periphery response', fontsize = 20)####im2 = PcolorImage(ax1, x=freq_ax, y=time_ax, A=periph_bm,    cmap=cm.coolwarm)##im = NonUniformImage(ax1, interpolation='nearest', extent=[1, 1, 1, 1],#                     cmap=cm.coolwarm)#im.set_data(freq_pt_r, time_ax_r, periph_bm)#ax1.images.append(im)#ax1.set_xlim(999, 1)#ax1.set_ylim(0, 0.3)##FIGURE PERIPHERY (BM & IHC)# Turn interactive plotting offplt.ioff()fig_periph, (ax_bm, ax_ihc) = plt.subplots(nrows=2, ncols=1, sharey=True, figsize=(8,10))fig_periph.suptitle('Periphery response - ' + str(periph_lvl) + ' dB SPL', fontsize = 20)im_bm = ax_bm.imshow(periph_bm[low_smpl_lim:upper_smpl_lim,:], aspect='auto',	cmap=cm.coolwarm, origin="lower")div_bm = make_axes_locatable(ax_bm)cax_bm = div_bm.append_axes("right", size="10%", pad=0.05)cbar_bm = plt.colorbar(im_bm, cax=cax_bm, format="%.2e")ax_bm.set_title('BM velocity')im_ihc = ax_ihc.imshow(periph_ihc[low_smpl_lim:upper_smpl_lim,:], aspect='auto', 	cmap=cm.OrRd, origin="lower")div_ihc = make_axes_locatable(ax_ihc)cax_ihc = div_ihc.append_axes("right", size="10%", pad=0.05)cbar_ihc = plt.colorbar(im_ihc, cax=cax_ihc, format="%.2e")ax_ihc.set_title('IHC voltage')fig_periph.savefig(os.getcwd() + sep + '2_mdl_plots' + sep + 'fig_periph_bm_ihc_' +	str(periph_lvl) + '-dB.pdf', bbox_inches='tight', dpi=600)#FIGURE AUDITORY NERVE (HIGH, MEDIUM & LOW SR FIBERS)abs_max_val = int( ceil( np.max([np.max(periph_an_high[low_smpl_lim:upper_smpl_lim,:]), 	np.max(periph_an_med[low_smpl_lim:upper_smpl_lim,:]),	np.max(periph_an_low[low_smpl_lim:upper_smpl_lim,:])]) ) )fig_an, (ax_an_high, ax_an_med, ax_an_low, ax_an_sum) = plt.subplots(nrows=1, ncols=4, sharey=True, sharex=True, figsize=(14,8))fig_an.suptitle('AN response - ' + str(periph_lvl) + ' dB SPL', fontsize = 20)im_an_high = ax_an_high.imshow(periph_an_high[low_smpl_lim:upper_smpl_lim,:], vmin=0, 	vmax=abs_max_val, aspect='auto', origin='lower', cmap=cm.inferno)div_an_high = make_axes_locatable(ax_an_high)cax_an_high = div_an_high.append_axes("right", size="10%", pad=0.05)cbar_an_high = plt.colorbar(im_an_high, cax=cax_an_high)ax_an_high.set_title('High-SR fibers')im_an_med = ax_an_med.imshow(periph_an_med[low_smpl_lim:upper_smpl_lim,:], vmin=0, 	vmax=abs_max_val, aspect='auto', origin='lower', cmap=cm.inferno)div_an_med = make_axes_locatable(ax_an_med)cax_an_med = div_an_med.append_axes("right", size="10%", pad=0.05)cbar_an_med = plt.colorbar(im_an_med, cax=cax_an_med)ax_an_med.set_title('Medium-SR fibers')im_an_low = ax_an_low.imshow(periph_an_low[low_smpl_lim:upper_smpl_lim,:], vmin=0, 	vmax=abs_max_val, aspect='auto', origin='lower', cmap=cm.inferno)div_an_low = make_axes_locatable(ax_an_low)cax_an_low = div_an_low.append_axes("right", size="10%", pad=0.05)cbar_an_low = plt.colorbar(im_an_low, cax=cax_an_low)ax_an_low.set_title('Low-SR fibers')#Adding all SR fibers togetherim_an_sum = ax_an_sum.imshow(periph_an_sum[low_smpl_lim:upper_smpl_lim,:], vmin=0, 	vmax=np.max(periph_an_sum[low_smpl_lim:upper_smpl_lim,:]), aspect='auto', origin='lower', 	cmap=cm.inferno)div_an_sum = make_axes_locatable(ax_an_sum)cax_an_sum = div_an_sum.append_axes("right", size="10%", pad=0.05)cbar_an_sum = plt.colorbar(im_an_sum, cax=cax_an_sum)ax_an_sum.set_title('Sum across SR fibers')fig_an.savefig(os.getcwd() + sep + '2_mdl_plots' + sep + 'fig_periph_an_' +	str(periph_lvl) + '-dB.pdf', bbox_inches='tight', dpi=600)# Turn interactive plotting onplt.ion()#FIGURE AUDITORY NERVE - ON FREQUENCY vs OFF FREQUENCYfig_an_on_vs_off = plt.figure(figsize=(14,8))sns.set_style('ticks')gs_an_on_vs_off_1 = gridspec.GridSpec(nrows=2, ncols=1)gs_an_on_vs_off_1.update(left=0.08, right=0.48, top=0.90, bottom=0.55, hspace=-.00)ax_an_high_on = fig_an_on_vs_off.add_subplot(gs_an_on_vs_off_1[0,0])ax_an_high_off = fig_an_on_vs_off.add_subplot(gs_an_on_vs_off_1[1,0], sharex=ax_an_high_on)ax_an_high_on.get_xaxis().set_visible(False)gs_an_on_vs_off_2 = gridspec.GridSpec(nrows=2, ncols=1)gs_an_on_vs_off_2.update(left=0.55, right=0.95, top=0.90, bottom=0.55, hspace=0.00)ax_an_med_on = fig_an_on_vs_off.add_subplot(gs_an_on_vs_off_2[0,0])ax_an_med_off = fig_an_on_vs_off.add_subplot(gs_an_on_vs_off_2[1,0], sharex=ax_an_med_on)ax_an_med_on.get_xaxis().set_visible(False)gs_an_on_vs_off_3 = gridspec.GridSpec(nrows=2, ncols=1)gs_an_on_vs_off_3.update(left=0.08, right=0.48, top=0.45, bottom=0.05, hspace=0.00)ax_an_low_on = fig_an_on_vs_off.add_subplot(gs_an_on_vs_off_3[0,0])ax_an_low_off = fig_an_on_vs_off.add_subplot(gs_an_on_vs_off_3[1,0], sharex=ax_an_low_on)ax_an_low_on.get_xaxis().set_visible(False)gs_an_on_vs_off_4 = gridspec.GridSpec(nrows=2, ncols=1)gs_an_on_vs_off_4.update(left=0.55, right=0.95, top=0.45, bottom=0.05, hspace=0.00)ax_an_sum_on = fig_an_on_vs_off.add_subplot(gs_an_on_vs_off_4[0,0])ax_an_sum_off = fig_an_on_vs_off.add_subplot(gs_an_on_vs_off_4[1,0], sharex=ax_an_sum_on)ax_an_sum_on.get_xaxis().set_visible(False)fig_an_on_vs_off.suptitle('AN response - ON (2 kHz) vs OFF (6 kHz) frequency - ' +	str(periph_lvl) + ' dB SPL', fontsize = 18)sum_max_val = 500#int( ceil( np.max(periph_an_sum[low_smpl_lim:upper_smpl_lim,:]) ))ax_an_high_on.plot(time_ax[low_smpl_lim:upper_smpl_lim], 	periph_an_high[low_smpl_lim:upper_smpl_lim, idx_freq_on])ax_an_high_off.plot(time_ax[low_smpl_lim:upper_smpl_lim], 	periph_an_high[low_smpl_lim:upper_smpl_lim, idx_freq_off])ax_an_high_off.set_xlim(low_smpl_lim/fs, upper_smpl_lim/fs)ax_an_high_on.set_ylim(0, sum_max_val)ax_an_high_off.set_ylim(0, sum_max_val)ax_an_high_on.set_title('High-SR', fontsize = 14)ax_an_high_off.set_xlabel('Time [s]')ax_an_high_on.set_ylabel('On-freq')ax_an_high_off.set_ylabel('Off-freq')ax_an_high_on.tick_params(right="off")ax_an_high_off.tick_params(top="off", right="off")ax_an_med_on.plot(time_ax[low_smpl_lim:upper_smpl_lim], 	periph_an_med[low_smpl_lim:upper_smpl_lim, idx_freq_on])ax_an_med_off.plot(time_ax[low_smpl_lim:upper_smpl_lim], 	periph_an_med[low_smpl_lim:upper_smpl_lim, idx_freq_off])ax_an_med_off.set_xlim(low_smpl_lim/fs, upper_smpl_lim/fs)ax_an_med_on.set_ylim(0, sum_max_val)ax_an_med_off.set_ylim(0, sum_max_val)ax_an_med_on.set_title('Med-SR', fontsize = 14)ax_an_med_off.set_xlabel('Time [s]')ax_an_med_on.set_ylabel('On-freq')ax_an_med_off.set_ylabel('Off-freq')ax_an_med_on.tick_params(right="off")ax_an_med_off.tick_params(top="off", right="off")ax_an_low_on.plot(time_ax[low_smpl_lim:upper_smpl_lim], 	periph_an_low[low_smpl_lim:upper_smpl_lim, idx_freq_on])ax_an_low_off.plot(time_ax[low_smpl_lim:upper_smpl_lim], 	periph_an_low[low_smpl_lim:upper_smpl_lim, idx_freq_off])ax_an_low_off.set_xlim(low_smpl_lim/fs, upper_smpl_lim/fs)ax_an_low_on.set_ylim(0, sum_max_val)ax_an_low_off.set_ylim(0, sum_max_val)ax_an_low_on.set_title('Low-SR', fontsize = 14)ax_an_low_off.set_xlabel('Time [s]')ax_an_low_on.set_ylabel('On-freq')ax_an_low_off.set_ylabel('Off-freq')ax_an_low_on.tick_params(right="off")ax_an_low_off.tick_params(top="off", right="off")ax_an_sum_on.plot(time_ax[low_smpl_lim:upper_smpl_lim], 	periph_an_sum[low_smpl_lim:upper_smpl_lim, idx_freq_on])ax_an_sum_off.plot(time_ax[low_smpl_lim:upper_smpl_lim], 	periph_an_sum[low_smpl_lim:upper_smpl_lim, idx_freq_off])ax_an_sum_off.set_xlim(low_smpl_lim/fs, upper_smpl_lim/fs)ax_an_sum_on.set_ylim(0, sum_max_val)ax_an_sum_off.set_ylim(0, sum_max_val)ax_an_sum_on.set_title('Sum across SR', fontsize = 14)ax_an_sum_off.set_xlabel('Time [s]')ax_an_sum_on.set_ylabel('On-freq')ax_an_sum_off.set_ylabel('Off-freq')ax_an_sum_on.tick_params(right="off")ax_an_sum_off.tick_params(top="off", right="off")mod = 'm25'fig_an_on_vs_off.savefig(os.getcwd() + sep + '2_mdl_plots' + sep +	'1_pilot_simulations_an' + sep + '1_plots' + sep + 'fig_periph_an_on_vs_off_' + 	mod + '_' + str(periph_lvl) + 'dB.pdf', bbox_inches='tight', dpi=300)#ANIMATIONSimport matplotlib.animation as animationimport seaborn as snssns.set_style('darkgrid', {"axes.facecolor": ".9"})periph_an_hs_anim = periph_an_high[low_smpl_lim:upper_smpl_lim,:]periph_an_ms_anim = periph_an_med[low_smpl_lim:upper_smpl_lim,:]periph_an_ls_anim = periph_an_low[low_smpl_lim:upper_smpl_lim,:]periph_an_sum_anim = periph_an_sum[low_smpl_lim:upper_smpl_lim,:]abs_max_val = int( ceil( np.max([np.max(periph_an_high[low_smpl_lim:upper_smpl_lim,:]), 	np.max(periph_an_med[low_smpl_lim:upper_smpl_lim,:]),	np.max(periph_an_low[low_smpl_lim:upper_smpl_lim,:])]) ) )sum_max_val = int( ceil( np.max(periph_an_sum[low_smpl_lim:upper_smpl_lim,:]) ))fig_an_anim, ((ax_an_hs_anim, ax_an_ms_anim), (ax_an_ls_anim, ax_an_sum_anim)) = plt.subplots(	nrows=2, ncols=2, figsize=(8,6))fig_an_anim.suptitle('AN response - ' +	str(periph_lvl) + ' dB SPL', fontsize = 20)an_hs_line, = ax_an_hs_anim.plot(freq_ax, periph_an_hs_anim[0,:])an_ms_line, = ax_an_ms_anim.plot(freq_ax, periph_an_ms_anim[0,:])an_ls_line, = ax_an_ls_anim.plot(freq_ax, periph_an_ls_anim[0,:])an_sum_line, = ax_an_sum_anim.plot(freq_ax, periph_an_sum_anim[0,:])#Set axis, limits and labelsax_an_hs_anim.set_ylim(0, abs_max_val)ax_an_hs_anim.set_xlim(freq_ax[0], freq_ax[-1])ax_an_hs_anim.set_xscale('log')ax_an_hs_anim.set_xlabel('Frequency [Hz]')ax_an_hs_anim.set_ylabel('Firing rate [spikes/sec]')ax_an_hs_anim.set_title('High-SR')ax_an_ms_anim.set_ylim(0, abs_max_val)ax_an_ms_anim.set_xlim(freq_ax[0], freq_ax[-1])ax_an_ms_anim.set_xscale('log')ax_an_ms_anim.set_xlabel('Frequency [Hz]')ax_an_ms_anim.set_ylabel('Firing rate [spikes/sec]')ax_an_ms_anim.set_title('Medium-SR')ax_an_ls_anim.set_ylim(0, abs_max_val)ax_an_ls_anim.set_xlim(freq_ax[0], freq_ax[-1])ax_an_ls_anim.set_xscale('log')ax_an_ls_anim.set_xlabel('Frequency [Hz]')ax_an_ls_anim.set_ylabel('Firing rate [spikes/sec]')ax_an_ls_anim.set_title('Low-SR')ax_an_sum_anim.set_ylim(0, sum_max_val)ax_an_sum_anim.set_xlim(freq_ax[0], freq_ax[-1])ax_an_sum_anim.set_xscale('log')ax_an_sum_anim.set_xlabel('Frequency [Hz]')ax_an_sum_anim.set_ylabel('Firing rate [spikes/sec]')ax_an_sum_anim.set_title('Sum across SR')time_text = fig_an_anim.text(0.02, 0.95, 'Time: ' + format(time_ax[low_smpl_lim]*1000, '.2f') + 	' ms', fontsize=14)fig_an_anim.tight_layout()fig_an_anim.subplots_adjust(top=0.85)# num_frames is the number of iterations of the update functionnum_frames = int(periph_an_hs_anim.shape[0])def update(num_frames):    an_hs_line.set_ydata(periph_an_hs_anim[num_frames,:])    an_ms_line.set_ydata(periph_an_ms_anim[num_frames,:])    an_ls_line.set_ydata(periph_an_ls_anim[num_frames,:])    an_sum_line.set_ydata(periph_an_sum_anim[num_frames,:])    time_text.set_text('Time: ' + format(time_ax[low_smpl_lim + num_frames]*1000, '.2f') + ' ms')    return an_hs_line, an_ms_line, an_ls_line, an_sum_line,ani = animation.FuncAnimation(fig_an_anim, update, num_frames, interval = 1, 	repeat=False, blit=True)FFMpegWriter = animation.writers['ffmpeg']writer = FFMpegWriter(fps=30, bitrate=1000)ani.save(os.getcwd() + sep + '2_mdl_plots' + sep + 'anim_m85_' +	str(periph_lvl) + '-dB.mp4', writer=writer, extra_args=['-vcodec', 'h264', 	'-pix_fmt', 'yuv420p'])#FIGURE AUDITORY NERVE (SUMMED)periph_an_sum_volts = ( (periph_an_high_non_scaled * num_high_sr_x_ihc) + 	(periph_an_med_non_scaled * num_med_sr_x_ihc) + 	(periph_an_low_non_scaled * num_low_sr_x_ihc) ) / M1_weight_fact#Plot the results at cf=2000 Hz#Parametersfs = 100000idx_fc = 468fm = 93fc = 2000t_cut_ini = 45e-3t_cut_end = 25e-3dur = 300e-3sampl_cut_ini = int(t_cut_ini*fs)dur_cut = dur - t_cut_ini - t_cut_endcycles_in_tvect = np.trunc(dur_cut*fm)cycles_samp_cut = int(np.trunc(cycles_in_tvect*fs/fm))#Result vectors summed across frequencyperiph_an_sum_sum = np.sum(periph_an_sum[sampl_cut_ini:sampl_cut_ini+cycles_samp_cut,:], axis=1)     #All fibersperiph_an_high_sum = np.sum(periph_an_high[sampl_cut_ini:sampl_cut_ini+cycles_samp_cut,:], axis=1)   #High-SRperiph_an_med_sum = np.sum(periph_an_med[sampl_cut_ini:sampl_cut_ini+cycles_samp_cut,:], axis=1)     #Med-SRperiph_an_low_sum = np.sum(periph_an_low[sampl_cut_ini:sampl_cut_ini+cycles_samp_cut,:], axis=1)     #Low-SR#Result vectors at fc=2000periph_an_sum_fc = periph_an_sum[sampl_cut_ini:sampl_cut_ini+cycles_samp_cut,idx_fc]            #All fibersperiph_an_high_fc = periph_an_high[sampl_cut_ini:sampl_cut_ini+cycles_samp_cut,idx_fc]          #High-SRperiph_an_med_fc = periph_an_med[sampl_cut_ini:sampl_cut_ini+cycles_samp_cut,idx_fc]            #Med-SRperiph_an_low_fc = periph_an_low[sampl_cut_ini:sampl_cut_ini+cycles_samp_cut,idx_fc]            #Low-SR#Compute FFTl = len(periph_an_sum_sum)nfft = l#Bin where fm and fc arefm_fft_bin         = int(np.round((fm*nfft/fs)))fc_fft_bin         = int(np.round((fc*nfft/fs)))periph_an_sum_sum_fft = np.fft.fft(periph_an_sum_sum, nfft)/(l/2)periph_an_sum_sum_magn = 20*np.log10(np.abs(periph_an_sum_sum_fft))win = signal.hamming(l, sym=False)periph_an_sum_sum_win = win*periph_an_sum_sumperiph_an_sum_sum_fft_win = np.fft.fft(periph_an_sum_sum_win, nfft)/(l/2)periph_an_sum_sum_magn_win = 20*np.log10(np.abs(periph_an_sum_sum_fft_win))f_axis = int(fs/2)*np.linspace(0,1,nfft/2+1)fig_try, (ax_try1, ax_try2) = plt.subplots(nrows=2, ncols=1, figsize=(8,10))fig_try.suptitle('Summed activity long - All ANF', fontsize = 20)ax_try1.plot(f_axis, periph_an_sum_sum_magn[0:(nfft/2)+1])ax_try1.set_xlim([0, 20000])ax_try1.set_title('No window')ax_try2.plot(f_axis, periph_an_sum_sum_magn_win[0:(nfft/2)+1])ax_try2.set_xlim([0, 20000])ax_try1.set_title('Window')