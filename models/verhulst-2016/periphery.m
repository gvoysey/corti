function output=periphery(sign,fs,fc,clean,data_folder,irregularities,storeflag,subject,sheraPo,IrrPct,non_linear_type)

% An fiber model
% input:
%   -sign: stimulus
%   -fs: samplerate
%   -fc: probe frequency or alternatively a string 'all' to probe all cochlear
%        sections or 'half' to probe half sections
%   -clean: delete the temporary files generated by the python call (1) or
%            not (0). Default 1
%   -data_folder: string of folder where to save the temporary files
%               generated by the python call (default current folder)
%   -irregularities: decide wether turn on (1) or off (0) irregularities and
%                  nonlinearities of the cochlear model (default 1 )
%   -storeflag: string that sets what variables to store from the
%   computation, each letter correspond to one desired output variable
%   (e.g. 'avhl' to store acceleration, displacement,  high and low spont.
%   fibers.) See "output" for the corresponding characters. Default
%   'avihmle'.
%   -subject: number representing the seed to generate the random
%           irregularities in the cochlear sections (default 1)

%  output:
%   -output.a: BM acceleration (store 'a')
%   -output.v: BM velocity     (store 'v')
%   -output.y: BM displacement (store 'y')
%   -output.emission: pressure output from the middle ear (store 'e')
%   -output.cf: center frequencies (always stored)
%   -output.ihc: IHC receptor potential (store 'i')
%   -output.anfH: HSR fiber spike probability [0,1] (store 'h')
%   -output.anfM: MSR fiber spike probability [0,1] (store 'm')
%   -output.anfL: LSR fiber spike probability [0,1] (store 'l')

[channels,idx]=min(size(sign));
if nargin < 11
    non_linear_type = 'vel';
end
if nargin < 10
    IrrPct = 0.05;
end
if nargin < 9
    sheraPo = 0.06;
end
if nargin < 8
    subject = 1;
end
if nargin < 7
    storeflag = 'avihlme';
end
if nargin<6
    irregularities=ones(1,channels);

end
if nargin<5
    data_folder=pwd();
end
if nargin<4
    clean=1;
end

if(numel(irregularities)==1)
    irregularities=irregularities*ones(1,channels);
end

Fs=fs;
sectionsNo=1e3;
[channels,idx]=min(size(sign));
if(idx==2) %transpose it (python C-style row major order)
    sign=sign';
end
stim=sign;
% for i=1:channels
%     stim(i,:)=resample(sign(i,:),Fs,fs);
% end
% sheraPo=0.060;
if(isstr(fc) && strcmp(fc,'all')) %if probing all sections 1001 output (1000 sections plus the middle ear)
    l=sectionsNo;
elseif(isstr(fc) && strcmp(fc,'half')) %if probing half sections sections 1001 output (1000 sections plus the middle ear)
    l=sectionsNo/2;
else %else pass it as a column vector
    [l,idx]=max(size(fc));
    if(idx==2)
        fc=fc'; 
    end
    fc=round(fc);
end
probes=fc;

act_path=pwd;

save('input.mat','stim','Fs','channels','subject','sheraPo','irregularities','probes','sectionsNo','data_folder','storeflag','IrrPct','non_linear_type','-v7');
system('python run_periphery.py');

cd(data_folder);
for i=1:channels
    p=length(stim(i,:));
    if(strfind(storeflag,'a'))
        fname=strcat('a',int2str(i),'.np');
        f=fopen(fname,'r');
        tmp=fread(f,[l,p],'double')';
        output(i).a=tmp;
        fclose(f);
    end
    if(strfind(storeflag,'v'))
        fname=strcat('v',int2str(i),'.np');
        f=fopen(fname,'r');
        tmp=fread(f,[l,p],'double')';
        output(i).v=tmp;
        fclose(f);
    end
    if(strfind(storeflag,'y'))
        fname=strcat('y',int2str(i),'.np');
        f=fopen(fname,'r');
        tmp=fread(f,[l,p],'double')';
        output(i).y=tmp;
        fclose(f);
    end
    if(strfind(storeflag,'e'))
        fname=strcat('emission',int2str(i),'.np');
        f=fopen(fname,'r');
        output(i).e=fread(f,[p,1],'double');
        fclose(f);
    end
    fname=strcat('cf',int2str(i),'.np');
    f=fopen(fname,'r');
    output(i).cf=fread(f,[l,1],'double');
    fclose(f);
    if(strfind(storeflag,'i'))
        fname=strcat('ihc',int2str(i),'.np');
        f=fopen(fname,'r');
        tmp=fread(f,[l,p],'double')';
        output(i).ihc=tmp;
        fclose(f);
    end
    if(strfind(storeflag,'h'))
        fname=strcat('anfH',int2str(i),'.np');
        f=fopen(fname,'r');
        tmp=fread(f,[l,p],'double')';
        output(i).anfH=tmp;
        fclose(f);
    end
    if(strfind(storeflag,'m'))
        fname=strcat('anfM',int2str(i),'.np');
        f=fopen(fname,'r');
        tmp=fread(f,[l,p],'double')';
        output(i).anfM=tmp;
        fclose(f);
    end
    if(strfind(storeflag,'l'))
        fname=strcat('anfL',int2str(i),'.np');
        f=fopen(fname,'r');
        tmp=fread(f,[l,p],'double')';
        output(i).anfL=tmp;
        fclose(f);
    end
end
if clean==1
    delete *.np
end
cd(act_path);
